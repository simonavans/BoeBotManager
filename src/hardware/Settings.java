package hardware;

public class Settings {

    /**
     * @author Timo and Simon
     */
    //Variables
    public final int ROBOTMAIN_OBJECT_PLACEMENT_TIME;
    public final int ULTRASONIC_GRAB_THRESHOLD;
    public final int ULTRASONIC_UNKNOWN_OBJECT_THRESHOLD;
    public final int ENGINE_FORWARD_SPEED;
    public final int ENGINE_BACK_STEER_SPEED;
    public final int ENGINE_NEUTRAL_OFFSET_LEFT;
    public final int ENGINE_NEUTRAL_OFFSET_RIGHT;
    public final int ENGINE_TURN_TIME;
    public final int IR_RECEIVER_BIT_THRESHOLD;
    public final int LINE_SENSOR_THRESHOLD;
    public final int LINE_SENSOR_CEILING;
    public final int LINE_SENSORS_WAIT_AFTER_DEVIATION;
    public final int LINE_SENSORS_WAIT_BEFORE_CROSSROAD;
    public final int LINE_SENSORS_DELAY_AFTER_CROSSROAD;
    public final int BLUETOOTH_BAUDRATE;
    public final int GRIPPER_OPEN_FREQUENCY;
    public final int GRIPPER_CLOSE_FREQUENCY;
    public final int ULTRASONIC_INPUT_PIN;
    public final int ULTRASONIC_OUTPUT_PIN;
    public final int LEFT_WHEEL_PIN;
    public final int RIGHT_WHEEL_PIN;
    public final int GRIPPER_PIN;
    public final int IR_RECEIVER_PIN;
    public final int[] LINE_SENSOR_ADC_PINS;
    public final int BUZZER_PIN;

    public Settings(
            // RobotMain
            int ROBOTMAIN_OBJECT_PLACEMENT_TIME,
            // Ultrasonic
            int ULTRASONIC_GRAB_THRESHOLD, int ULTRASONIC_UNKNOWN_OBJECT_THRESHOLD,
            // Engine
            int ENGINE_FORWARD_SPEED, int ENGINE_BACK_STEER_SPEED, int ENGINE_NEUTRAL_OFFSET_LEFT, int ENGINE_NEUTRAL_OFFSET_RIGHT, int ENGINE_TURN_TIME,
            // IR Receiver
            int IR_RECEIVER_BIT_THRESHOLD,
            // Line Sensor(s)
            int LINE_SENSOR_THRESHOLD, int LINE_SENSOR_CEILING, int LINE_SENSORS_WAIT_AFTER_DEVIATION, int LINE_SENSORS_WAIT_BEFORE_CROSSROAD, int LINE_SENSORS_DELAY_AFTER_CROSSROAD,
            // Bluetooth
            int BLUETOOTH_BAUDRATE,
            // Gripper
            int GRIPPER_OPEN_FREQUENCY, int GRIPPER_CLOSE_FREQUENCY,
            // Pins
            int ULTRASONIC_INPUT_PIN, int ULTRASONIC_OUTPUT_PIN, int LEFT_WHEEL_PIN, int RIGHT_WHEEL_PIN, int GRIPPER_PIN, int IR_RECEIVER_PIN, int[] LINE_SENSOR_ADC_PINS, int BUZZER_PIN
    ) {
        this.ROBOTMAIN_OBJECT_PLACEMENT_TIME = ROBOTMAIN_OBJECT_PLACEMENT_TIME;
        this.ULTRASONIC_GRAB_THRESHOLD = ULTRASONIC_GRAB_THRESHOLD;
        this.ULTRASONIC_UNKNOWN_OBJECT_THRESHOLD = ULTRASONIC_UNKNOWN_OBJECT_THRESHOLD;
        this.ENGINE_FORWARD_SPEED = ENGINE_FORWARD_SPEED;
        this.ENGINE_BACK_STEER_SPEED = ENGINE_BACK_STEER_SPEED;
        this.ENGINE_NEUTRAL_OFFSET_LEFT = ENGINE_NEUTRAL_OFFSET_LEFT;
        this.ENGINE_NEUTRAL_OFFSET_RIGHT = ENGINE_NEUTRAL_OFFSET_RIGHT;
        this.ENGINE_TURN_TIME = ENGINE_TURN_TIME;
        this.IR_RECEIVER_BIT_THRESHOLD = IR_RECEIVER_BIT_THRESHOLD;
        this.LINE_SENSOR_THRESHOLD = LINE_SENSOR_THRESHOLD;
        this.LINE_SENSOR_CEILING = LINE_SENSOR_CEILING;
        this.LINE_SENSORS_WAIT_AFTER_DEVIATION = LINE_SENSORS_WAIT_AFTER_DEVIATION;
        this.LINE_SENSORS_WAIT_BEFORE_CROSSROAD = LINE_SENSORS_WAIT_BEFORE_CROSSROAD;
        this.LINE_SENSORS_DELAY_AFTER_CROSSROAD = LINE_SENSORS_DELAY_AFTER_CROSSROAD;
        this.BLUETOOTH_BAUDRATE = BLUETOOTH_BAUDRATE;
        this.GRIPPER_OPEN_FREQUENCY = GRIPPER_OPEN_FREQUENCY;
        this.GRIPPER_CLOSE_FREQUENCY = GRIPPER_CLOSE_FREQUENCY;
        this.ULTRASONIC_INPUT_PIN = ULTRASONIC_INPUT_PIN;
        this.ULTRASONIC_OUTPUT_PIN = ULTRASONIC_OUTPUT_PIN;
        this.LEFT_WHEEL_PIN = LEFT_WHEEL_PIN;
        this.RIGHT_WHEEL_PIN = RIGHT_WHEEL_PIN;
        this.GRIPPER_PIN = GRIPPER_PIN;
        this.IR_RECEIVER_PIN = IR_RECEIVER_PIN;
        this.LINE_SENSOR_ADC_PINS = LINE_SENSOR_ADC_PINS;
        this.BUZZER_PIN = BUZZER_PIN;
    }
}
